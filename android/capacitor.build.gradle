// DO NOT EDIT THIS FILE! IT IS GENERATED EACH TIME "capacitor update" IS RUN
/*
  This file is generated automatically by Capacitor.
  It is used to configure variables for Capacitor apps and plugins.
  It is also used to hook into the Gradle build process to do things like
  copy web assets and apply patch files.
*/
import groovy.json.JsonSlurper
import java.util.regex.Matcher
import java.util.regex.Pattern

def appProjectRoot = rootProject.projectDir
def appSrcRoot = new File(appProjectRoot, "src")

// Correctly reference the root project directory to find node_modules
def nodeModules = new File(project.rootDir.getParentFile(), "node_modules")

def capacitorConfigJson = new File(appProjectRoot, "capacitor.config.json")
def config = new JsonSlurper().parseText(capacitorConfigJson.text)

ext {
  cdvMinSdkVersion = config.android?.minSdkVersion ?: 22
  cdvCompileSdkVersion = config.android?.compileSdkVersion ?: 34
  cdvTargetSdkVersion = config.android?.targetSdkVersion ?: 34
  cdvBuildToolsVersion = config.android?.buildToolsVersion ?: "34.0.0"
  capacitorVersion = "6.0.0"
  androidxActivityVersion = config.android?.androidxActivityVersion ?: "1.8.2"
  androidxAppCompatVersion = config.android?.androidxAppCompatVersion ?: "1.6.1"
  androidxCoordinatorLayoutVersion = config.android?.androidxCoordinatorLayoutVersion ?: "1.2.0"
  androidxCoreVersion = config.android?.androidxCoreVersion ?: "1.12.0"
  androidxFragmentVersion = config.android?.androidxFragmentVersion ?: "1.6.2"
  coreSplashScreenVersion = config.android?.coreSplashScreenVersion ?: "1.0.1"
  androidxWebkitVersion = config.android?.androidxWebkitVersion ?: "1.10.0"
  junitVersion = config.android?.junitVersion ?: "4.13.2"
  androidxJunitVersion = config.android?.androidxJunitVersion ?: "1.1.5"
  androidxEspressoCoreVersion = config.android?.androidxEspressoCoreVersion ?: "3.5.1"
  googleServicesVersion = config.android?.googleServicesVersion ?: "4.4.1"
  firebaseBomVersion = config.android?.firebaseBomVersion ?: "32.8.1"
  playServicesAuthVersion = config.android?.playServicesAuthVersion ?: "21.1.0"
  playServicesLocationVersion = config.android?.playServicesLocationVersion ?: "21.2.0"
  playServicesBasementVersion = config.android?.playServicesBasementVersion ?: "18.3.0"
  androidxBrowserVersion = config.android?.androidxBrowserVersion ?: "1.8.0"
  androidxExifInterfaceVersion = config.android?.androidxExifInterfaceVersion ?: "1.3.7"
  kotlinxCoroutinesVersion = "1.7.3"
  kotlinxSerializationJsonVersion = "1.6.3"
}

def getAndroidPackageName() {
  def userConfig = new File(appProjectRoot, "capacitor.config.json")
  if (userConfig.exists()) {
    def parsedConfig = new JsonSlurper().parseText(userConfig.text)
    return parsedConfig.appId
  }
}

static def findUnusedExcludedFile(project, file) {
  def found = false
  project.tasks.whenTaskAdded { task ->
    if (task.name.startsWith("package")) {
      if (task.excludes.contains(file)) {
        found = true
      }
    }
  }
  return found
}

static def copyAndReplace(src, dest, replacements) {
  if (src.isDirectory()) {
    if (!dest.exists()) {
      dest.mkdirs()
    }

    src.list().each {
      copyAndReplace(new File(src, it), new File(dest, it), replacements)
    }
  } else {
    def text = src.text
    replacements.each { key, value ->
      text = text.replaceAll(key, value)
    }
    dest.write(text)
  }
}

task capacitorUpdate {
  doLast {
    def plugins = new ArrayList<String>()
    def capacitorPluginsFile = new File(appSrcRoot, "assets/capacitor.plugins.json")
    if (capacitorPluginsFile.exists()) {
      def parsedPlugins = new JsonSlurper().parseText(capacitorPluginsFile.text)
      for (plugin in parsedPlugins) {
        if (plugin.android) {
          def pluginPath = plugin.android.path
          plugins.add(pluginPath)
        }
      }
    }

    def replacements = [
            "CAP_PLUGIN_PATH"  : plugins.join(",\n        ")
    ]
    def pluginSrc = new File(nodeModules, "@capacitor/android/capacitor/src/main/java/com/getcapacitor/PluginHandle.java")
    def pluginDest = new File(appSrcRoot, "java/com/getcapacitor/PluginHandle.java")

    copyAndReplace(pluginSrc, pluginDest, replacements)

    def excludedFiles = ["com/getcapacitor/PluginHandle.java"]
    excludedFiles.each {
      if (!findUnusedExcludedFile(project, it)) {
      }
    }
  }
}

task capacitorCopy {
  doLast {
    // Correctly reference the root project directory to find the webDir
    def webDir = config.webDir ? new File(project.rootDir.getParentFile(), config.webDir) : new File(project.rootDir.getParentFile(), "www")
    if (!webDir.exists()) {
      // Fallback for older structures
      webDir = config.webDir ? new File(appProjectRoot, config.webDir) : new File(appProjectRoot, "www")
    }

    def webAssetDir = new File(appSrcRoot, "assets/public")
    if (webAssetDir.exists()) {
      delete webAssetDir
    }
    copy {
      from webDir
      into webAssetDir
    }
  }
}

task capacitorSync(dependsOn: ['capacitorUpdate', 'capacitorCopy']) {
  doLast {
  }
}

task cap(dependsOn: 'capacitorSync') {
  doLast {
    println "DONE!"
  }
}

/**
 * Hook into the Android build process to patch files.
 */
def patch() {
  def patcherFile = new File(nodeModules, "patch-package/index.js")
  if (patcherFile.exists()) {
    try {
      // Correctly reference the root project directory to run npm commands
      def workingDir = project.rootDir.getParentFile()
      if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
        exec {
          commandLine 'npx', 'patch-package'
          workingDir workingDir
        }
      } else {
        exec {
          commandLine 'npx.cmd', 'patch-package'
          workingDir workingDir
        }
      }
    } catch(Exception e) {
      System.err.println("Failed to apply patch-package patches: " + e.getMessage())
    }
  }
}

def buildWebApp() {
  // Correctly reference the root project directory to find package.json and webDir
  def projectRoot = project.rootDir.getParentFile()
  def webDir = config.webDir ? new File(projectRoot, config.webDir) : new File(projectRoot, "www")

  // Don't build if the web dir already exists
  // if (webDir.exists()) {
  //   return
  // }
  
  def packageJson = new File(projectRoot, "package.json")
  if (!packageJson.exists()) {
    System.err.println("package.json not found in project root")
    return
  }

  def parsedPackage = new JsonSlurper().parseText(packageJson.text)
  if (parsedPackage.scripts.build == null) {
    System.err.println("build script not found in package.json")
    return
  }

  try {
    println "Executing 'npm run build' in " + projectRoot.absolutePath
    if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
      exec {
        workingDir projectRoot
        commandLine 'npm', 'run', 'build'
      }
    } else {
      exec {
        workingDir projectRoot
        commandLine 'npm.cmd', 'run', 'build'
      }
    }
  } catch(Exception e) {
    System.err.println("Could not build web app: " + e.getMessage())
    throw e;
  }
}

afterEvaluate {
  def isCapacitorPlugin = false
  try {
    def f = new File(project.projectDir, "build.gradle")
    if (f.text.contains("apply from: \"../../node_modules/@capacitor/android/capacitor.build.gradle\"")) {
      isCapacitorPlugin = true
    }
  } catch (Exception e) {
  }

  if (findProject(':app') && !isCapacitorPlugin) {
    apply from: "../../node_modules/@capacitor/android/capacitor-cordova-android-plugins/cordova.variables.gradle"

    // From https://github.com/playgameservices/play-games-plugin-for-unity/pull/378/files
    // We need to get the package name for the resources.
    // This is necessary to find the R class for the manifest value.
    def manifestFile = new File(project.projectDir, "src/main/AndroidManifest.xml")
    def manifestText = manifestFile.getText()
    def manifestPackage = ""
    def packagePattern = Pattern.compile("package=\"([a-zA-Z0-9._]*)\"")
    def packageMatcher = packagePattern.matcher(manifestText)
    if (packageMatcher.find()) {
      manifestPackage = packageMatcher.group(1)
    }

    def stringsFile = new File(project.projectDir, "src/main/res/values/strings.xml")
    def stringsText = stringsFile.getText()

    def appNamePattern = Pattern.compile("<string name=\"app_name\">([^<]+)</string>")
    def appNameMatcher = appNamePattern.matcher(stringsText)
    def appName = ""
    if (appNameMatcher.find()) {
      appName = appNameMatcher.group(1)
    }

    def activityNamePattern = Pattern.compile("<string name=\"title_activity_main\">([^<]+)</string>")
    def activityNameMatcher = activityNamePattern.matcher(stringsText)
    def activityName = ""
    if (activityNameMatcher.find()) {
      activityName = activityNameMatcher.group(1)
    }

    def packageNamePattern = Pattern.compile("<string name=\"package_name\">([^<]+)</string>")
    def packageNameMatcher = packageNamePattern.matcher(stringsText)
    def packageName = ""
    if (packageNameMatcher.find()) {
      packageName = packageNameMatcher.group(1)
    }
  }
}

preBuild.dependsOn capacitorSync
// Only build the web app if the :app project is being built
if (project.hasProperty('android.library')) {
  // This is a library project, do not build the web app
} else {
  // This is the main app project, build the web app
  preBuild.dependsOn buildWebApp
}
preBuild.dependsOn patch
build.dependsOn copyAndReplace
task copyCordovaPlugins(type: Copy) {
}
preBuild.dependsOn copyCordovaPlugins
