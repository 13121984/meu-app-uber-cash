// DO NOT EDIT THIS FILE! IT IS GENERATED EACH TIME "capacitor update" IS RUN
/*
  This file is generated automatically by Capacitor.
  It is used to configure variables for Capacitor apps and plugins.
  It is also used to hook into the Gradle build process to do things like
  copy web assets and apply patch files.
*/
import groovy.json.JsonSlurper
import java.util.regex.Matcher
import java.util.regex.Pattern
import java.io.File

// Correctly locate the root project directory to find node_modules
def appProjectRoot = project.projectDir.getParentFile()

def capacitorConfigJson = new File(appProjectRoot, "capacitor.config.json")
if (!capacitorConfigJson.exists()) {
    println "capacitor.config.json not found in ${appProjectRoot}"
    return
}

def config = new JsonSlurper().parseText(capacitorConfigJson.text)

ext {
  cdvMinSdkVersion = config.android?.minSdkVersion ?: 22
  cdvCompileSdkVersion = config.android?.compileSdkVersion ?: 34
  cdvTargetSdkVersion = config.android?.targetSdkVersion ?: 34
  cdvBuildToolsVersion = config.android?.buildToolsVersion ?: "34.0.0"
  capacitorVersion = "6.0.0"
  androidxActivityVersion = config.android?.androidxActivityVersion ?: "1.8.2"
  androidxAppCompatVersion = config.android?.androidxAppCompatVersion ?: "1.6.1"
  androidxCoordinatorLayoutVersion = config.android?.androidxCoordinatorLayoutVersion ?: "1.2.0"
  androidxCoreVersion = config.android?.androidxCoreVersion ?: "1.12.0"
  androidxFragmentVersion = config.android?.androidxFragmentVersion ?: "1.6.2"
  coreSplashScreenVersion = config.android?.coreSplashScreenVersion ?: "1.0.1"
  androidxWebkitVersion = config.android?.androidxWebkitVersion ?: "1.10.0"
  junitVersion = config.android?.junitVersion ?: "4.13.2"
  androidxJunitVersion = config.android?.androidxJunitVersion ?: "1.1.5"
  androidxEspressoCoreVersion = config.android?.androidxEspressoCoreVersion ?: "3.5.1"
  googleServicesVersion = config.android?.googleServicesVersion ?: "4.4.1"
  firebaseBomVersion = config.android?.firebaseBomVersion ?: "32.8.1"
  playServicesAuthVersion = config.android?.playServicesAuthVersion ?: "21.1.0"
  playServicesLocationVersion = config.android?.playServicesLocationVersion ?: "21.2.0"
  playServicesBasementVersion = config.android?.playServicesBasementVersion ?: "18.3.0"
  androidxBrowserVersion = config.android?.androidxBrowserVersion ?: "1.8.0"
  androidxExifInterfaceVersion = config.android?.androidxExifInterfaceVersion ?: "1.3.7"
  kotlinxCoroutinesVersion = "1.7.3"
  kotlinxSerializationJsonVersion = "1.6.3"
}

def getAndroidPackageName() {
  def userConfig = new File(appProjectRoot, "capacitor.config.json")
  if (userConfig.exists()) {
    def parsedConfig = new JsonSlurper().parseText(userConfig.text)
    return parsedConfig.appId
  }
}

static def findUnusedExcludedFile(project, file) {
  def found = false
  project.tasks.whenTaskAdded { task ->
    if (task.name.startsWith("package")) {
      if (task.excludes.contains(file)) {
        found = true
      }
    }
  }
  return found
}

static def copyAndReplace(src, dest, replacements) {
  if (src.isDirectory()) {
    if (!dest.exists()) {
      dest.mkdirs()
    }

    src.list().each {
      copyAndReplace(new File(src, it), new File(dest, it), replacements)
    }
  } else {
    def text = src.text
    replacements.each { key, value ->
      text = text.replaceAll(key, value)
    }
    dest.write(text)
  }
}

task capacitorUpdate {
  doLast {
    def plugins = new ArrayList<String>()
    def capacitorPluginsFile = new File(project.projectDir, "src/main/assets/capacitor.plugins.json")
    if (capacitorPluginsFile.exists()) {
      def parsedPlugins = new JsonSlurper().parseText(capacitorPluginsFile.text)
      for (plugin in parsedPlugins) {
        if (plugin.android) {
          def pluginPath = plugin.android.path
          plugins.add(pluginPath)
        }
      }
    }

    def replacements = [
            "CAP_PLUGIN_PATH"  : plugins.join(",\n        ")
    ]
    def pluginSrc = new File(nodeModules, "@capacitor/android/capacitor/src/main/java/com/getcapacitor/PluginHandle.java")
    def pluginDest = new File(project.projectDir, "src/main/java/com/getcapacitor/PluginHandle.java")

    copyAndReplace(pluginSrc, pluginDest, replacements)

    def excludedFiles = ["com/getcapacitor/PluginHandle.java"]
    excludedFiles.each {
      if (!findUnusedExcludedFile(project, it)) {
      }
    }
  }
}

task capacitorCopy {
  doLast {
    def webDir = config.webDir ? new File(appProjectRoot, config.webDir) : new File(appProjectRoot, "www")
    
    // Check if webDir exists in project root, if not, check inside android/app
    if (!webDir.exists()) {
        webDir = config.webDir ? new File(project.projectDir, config.webDir) : new File(project.projectDir, "www")
    }

    def webAssetDir = new File(project.projectDir, "src/main/assets/public")
    if (webAssetDir.exists()) {
      delete webAssetDir
    }
    copy {
      from webDir
      into webAssetDir
    }
  }
}

def buildWebApp() {
  def projectRoot = appProjectRoot
  def packageJson = new File(projectRoot, "package.json")
  if (!packageJson.exists()) {
    println "package.json not found in ${projectRoot}"
    return
  }

  def parsedPackage = new JsonSlurper().parseText(packageJson.text)
  if (parsedPackage.scripts == null || parsedPackage.scripts.build == null) {
    println "build script not found in package.json"
    return
  }

  println "Executing npm run build in ${projectRoot}"
  try {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
      exec {
        workingDir projectRoot
        commandLine 'npm.cmd', 'run', 'build'
      }
    } else {
      exec {
        workingDir projectRoot
        commandLine 'npm', 'run', 'build'
      }
    }
  } catch(Exception e) {
    System.err.println("Could not build web app: " + e.getMessage())
    throw e;
  }
}

task cap(dependsOn: ['capacitorUpdate', 'capacitorCopy']) {
  doLast {
    println "DONE!"
  }
}

afterEvaluate {
  def isCapacitorPlugin = false
  try {
    def f = new File(project.projectDir, "build.gradle")
    if (f.text.contains("apply from: \"../../node_modules/@capacitor/android/capacitor.build.gradle\"")) {
      isCapacitorPlugin = true
    }
  } catch (Exception e) {
  }

  if (findProject(':app') && !isCapacitorPlugin) {
    apply from: "../../node_modules/@capacitor/android/capacitor-cordova-android-plugins/cordova.variables.gradle"
    
    project.tasks.getByName("preBuild").dependsOn("capacitorUpdate")
    project.tasks.getByName("preBuild").dependsOn(buildWebApp)
    project.tasks.getByName("preBuild").dependsOn("capacitorCopy")
  }
}
