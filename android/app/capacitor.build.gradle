// DO NOT EDIT THIS FILE! IT IS GENERATED EACH TIME "capacitor update" IS RUN
/*
  This file is generated automatically by Capacitor.
  It is used to configure variables for Capacitor apps and plugins.
  It is also used to hook into the Gradle build process to do things like
  copy web assets and apply patch files.
*/
import groovy.json.JsonSlurper
import java.util.regex.Matcher
import java.util.regex.Pattern
import java.io.File

// Correctly locate the root project directory to find node_modules
def appProjectRoot = project.projectDir.getParentFile()

def capacitorConfigJson = new File(appProjectRoot, "capacitor.config.json")
if (!capacitorConfigJson.exists()) {
    println "capacitor.config.json not found in ${appProjectRoot.absolutePath}"
    return
}
def config = new JsonSlurper().parseText(capacitorConfigJson.text)

ext {
  cdvMinSdkVersion = config.android?.minSdkVersion ?: 22
  cdvCompileSdkVersion = config.android?.compileSdkVersion ?: 34
  cdvTargetSdkVersion = config.android?.targetSdkVersion ?: 34
  cdvBuildToolsVersion = config.android?.buildToolsVersion ?: "34.0.0"
  capacitorVersion = "6.0.0"
  androidxActivityVersion = config.android?.androidxActivityVersion ?: "1.8.2"
  androidxAppCompatVersion = config.android?.androidxAppCompatVersion ?: "1.6.1"
  androidxCoordinatorLayoutVersion = config.android?.androidxCoordinatorLayoutVersion ?: "1.2.0"
  androidxCoreVersion = config.android?.androidxCoreVersion ?: "1.12.0"
  androidxFragmentVersion = config.android?.androidxFragmentVersion ?: "1.6.2"
  coreSplashScreenVersion = config.android?.coreSplashScreenVersion ?: "1.0.1"
  androidxWebkitVersion = config.android?.androidxWebkitVersion ?: "1.10.0"
  junitVersion = config.android?.junitVersion ?: "4.13.2"
  androidxJunitVersion = config.android?.androidxJunitVersion ?: "1.1.5"
  androidxEspressoCoreVersion = config.android?.androidxEspressoCoreVersion ?: "3.5.1"
  googleServicesVersion = config.android?.googleServicesVersion ?: "4.4.1"
  firebaseBomVersion = config.android?.firebaseBomVersion ?: "32.8.1"
  playServicesAuthVersion = config.android?.playServicesAuthVersion ?: "21.1.0"
  playServicesLocationVersion = config.android?.playServicesLocationVersion ?: "21.2.0"
  playServicesBasementVersion = config.android?.playServicesBasementVersion ?: "18.3.0"
  androidxBrowserVersion = config.android?.androidxBrowserVersion ?: "1.8.0"
  androidxExifInterfaceVersion = config.android?.androidxExifInterfaceVersion ?: "1.3.7"
  kotlinxCoroutinesVersion = "1.7.3"
  kotlinxSerializationJsonVersion = "1.6.3"
}

def getAndroidPackageName() {
  def userConfig = new File(appProjectRoot, "capacitor.config.json")
  if (userConfig.exists()) {
    def parsedConfig = new JsonSlurper().parseText(userConfig.text)
    return parsedConfig.appId
  }
}

task capacitorSync {
  doLast {
    def webDir = new File(appProjectRoot, config.webDir)
    if (config.webDir && webDir.exists()) {
      def webAssetDir = new File(project.projectDir, "src/main/assets/public")
      if (webAssetDir.exists()) {
        delete webAssetDir
      }
      copy {
        from webDir
        into webAssetDir
      }
    }
  }
}

def buildWebApp() {
  def webDir = new File(appProjectRoot, config.webDir)
  if (webDir.exists()) {
    return
  }

  def packageJson = new File(appProjectRoot, "package.json")
  if (!packageJson.exists()) {
    return
  }

  def parsedPackage = new JsonSlurper().parseText(packageJson.text)
  if (parsedPackage.scripts.build == null) {
    return
  }
  println "Capacitor: Running npm run build in ${appProjectRoot.absolutePath}"
  try {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
      exec {
        workingDir appProjectRoot
        commandLine 'npm.cmd', 'run', 'build'
      }
    } else {
      exec {
        workingDir appProjectRoot
        commandLine 'npm', 'run', 'build'
      }
    }
  } catch(Exception e) {
    System.err.println("Could not build web app: " + e.getMessage())
    throw e;
  }
}

// Hook into the build process
preBuild.dependsOn(buildWebApp)
preBuild.dependsOn(capacitorSync)
    