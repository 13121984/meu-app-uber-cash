// DO NOT EDIT THIS FILE! IT IS GENERATED EACH TIME "capacitor update" IS RUN
/*
  This file is generated automatically by Capacitor.
  It is used to configure variables for Capacitor apps and plugins.
  It is also used to hook into the Gradle build process to do things like
  copy web assets and apply patch files.
*/
import groovy.json.JsonSlurper
import java.util.regex.Matcher
import java.util.regex.Pattern
import java.io.File

def appProjectRoot = rootProject.projectDir
def appSrcRoot = new File(appProjectRoot, "src")
// X: Correctly locate the root project directory to find node_modules
def nodeModules = new File(project.projectDir.getParentFile().getParentFile(), "node_modules")

def capacitorConfigJson = new File(appProjectRoot, "capacitor.config.json")
def config = new JsonSlurper().parseText(capacitorConfigJson.text)

ext {
  cdvMinSdkVersion = config.android?.minSdkVersion ?: 22
  // Overriding this to 34 to align with latest Android requirements
  // Might need to be updated in the future.
  cdvCompileSdkVersion = config.android?.compileSdkVersion ?: 34
  cdvTargetSdkVersion = config.android?.targetSdkVersion ?: 34
  cdvBuildToolsVersion = config.android?.buildToolsVersion ?: "34.0.0"
  capacitorVersion = "6.0.0"
  androidxActivityVersion = config.android?.androidxActivityVersion ?: "1.8.2"
  androidxAppCompatVersion = config.android?.androidxAppCompatVersion ?: "1.6.1"
  androidxCoordinatorLayoutVersion = config.android?.androidxCoordinatorLayoutVersion ?: "1.2.0"
  androidxCoreVersion = config.android?.androidxCoreVersion ?: "1.12.0"
  androidxFragmentVersion = config.android?.androidxFragmentVersion ?: "1.6.2"
  coreSplashScreenVersion = config.android?.coreSplashScreenVersion ?: "1.0.1"
  androidxWebkitVersion = config.android?.androidxWebkitVersion ?: "1.10.0"
  junitVersion = config.android?.junitVersion ?: "4.13.2"
  androidxJunitVersion = config.android?.androidxJunitVersion ?: "1.1.5"
  androidxEspressoCoreVersion = config.android?.androidxEspressoCoreVersion ?: "3.5.1"
  googleServicesVersion = config.android?.googleServicesVersion ?: "4.4.1"
  firebaseBomVersion = config.android?.firebaseBomVersion ?: "32.8.1"
  playServicesAuthVersion = config.android?.playServicesAuthVersion ?: "21.1.0"
  playServicesLocationVersion = config.android?.playServicesLocationVersion ?: "21.2.0"
  playServicesBasementVersion = config.android?.playServicesBasementVersion ?: "18.3.0"
  androidxBrowserVersion = config.android?.androidxBrowserVersion ?: "1.8.0"
  androidxExifInterfaceVersion = config.android?.androidxExifInterfaceVersion ?: "1.3.7"
  kotlinxCoroutinesVersion = "1.7.3"
  kotlinxSerializationJsonVersion = "1.6.3"
}

def getAndroidPackageName() {
  def userConfig = new File(appProjectRoot, "capacitor.config.json")
  if (userConfig.exists()) {
    def parsedConfig = new JsonSlurper().parseText(userConfig.text)
    return parsedConfig.appId
  }
}

static def findUnusedExcludedFile(project, file) {
  def found = false
  project.tasks.whenTaskAdded { task ->
    if (task.name.startsWith("package")) {
      if (task.excludes.contains(file)) {
        found = true
      }
    }
  }
  return found
}

static def copyAndReplace(src, dest, replacements) {
  if (src.isDirectory()) {
    if (!dest.exists()) {
      dest.mkdirs()
    }

    src.list().each {
      copyAndReplace(new File(src, it), new File(dest, it), replacements)
    }
  } else {
    def text = src.text
    replacements.each { key, value ->
      text = text.replaceAll(key, value)
    }
    dest.write(text)
  }
}

task capacitorUpdate {
  doLast {
    def plugins = new ArrayList<String>()
    def capacitorPluginsFile = new File(appSrcRoot, "assets/capacitor.plugins.json")
    if (capacitorPluginsFile.exists()) {
      def parsedPlugins = new JsonSlurper().parseText(capacitorPluginsFile.text)
      for (plugin in parsedPlugins) {
        if (plugin.android) {
          def pluginPath = plugin.android.path
          plugins.add(pluginPath)
        }
      }
    }

    def replacements = [
            "CAP_PLUGIN_PATH"  : plugins.join(",\n        ")
    ]
    def pluginSrc = new File(nodeModules, "@capacitor/android/capacitor/src/main/java/com/getcapacitor/PluginHandle.java")
    def pluginDest = new File(appSrcRoot, "java/com/getcapacitor/PluginHandle.java")

    copyAndReplace(pluginSrc, pluginDest, replacements)

    def excludedFiles = ["com/getcapacitor/PluginHandle.java"]
    excludedFiles.each {
      if (!findUnusedExcludedFile(project, it)) {
      }
    }
  }
}

task capacitorCopy {
  doLast {
    def webDir = config.webDir ? new File(appProjectRoot.getParentFile().getParentFile(), config.webDir) : new File(appProjectRoot.getParentFile().getParentFile(), "www")
    if (!webDir.exists()) {
      webDir = config.webDir ? new File(appProjectRoot, config.webDir) : new File(appProjectRoot, "www")
    }

    def webAssetDir = new File(appSrcRoot, "assets/public")
    if (webAssetDir.exists()) {
      delete webAssetDir
    }
    copy {
      from webDir
      into webAssetDir
    }
  }
}

task capacitorSync(dependsOn: ['capacitorUpdate', 'capacitorCopy']) {
  doLast {
  }
}

task cap(dependsOn: 'capacitorSync') {
  doLast {
    println "DONE!"
  }
}

/**
 * Hook into the Android build process to patch files.
 */
def patch() {
  def patcherFile = new File(nodeModules, "patch-package/index.js")
  if (patcherFile.exists()) {
    try {
      def nodeDir = new File(System.getProperty("user.home"), ".nvm/versions/node/v18.17.1/bin")

      if (!System.getProperty('os.name').toLowerCase().contains('windows') && nodeDir.exists()) {
        exec {
          workingDir project.projectDir.getParentFile()
          commandLine 'npx', 'patch-package'
        }
      } else {
        exec {
          workingDir project.projectDir.getParentFile()
          commandLine 'npx.cmd', 'patch-package'
        }
      }
    } catch(Exception e) {
      System.err.println("Failed to apply patch-package patches: " + e.getMessage())
    }
  }
}

def buildWebApp() {
  def webDir = config.webDir ? new File(appProjectRoot.getParentFile().getParentFile(), config.webDir) : new File(appProjectRoot.getParentFile().getParentFile(), "www")
  if (webDir.exists()) {
    return
  }

  def packageJson = new File(appProjectRoot.getParentFile().getParentFile(), "package.json")
  if (!packageJson.exists()) {
    return
  }

  def parsedPackage = new JsonSlurper().parseText(packageJson.text)
  if (parsedPackage.scripts.build == null) {
    return
  }

  try {
    def nodeDir = new File(System.getProperty("user.home"), ".nvm/versions/node/v18.17.1/bin")

    if (!System.getProperty('os.name').toLowerCase().contains('windows') && nodeDir.exists()) {
      exec {
        workingDir project.projectDir.getParentFile().getParentFile()
        commandLine 'npm', 'run', 'build'
      }
    } else {
      exec {
        workingDir project.projectDir.getParentFile().getParentFile()
        commandLine 'npm.cmd', 'run', 'build'
      }
    }
  } catch(Exception e) {
    System.err.println("Could not build web app: " + e.getMessage())
    throw e;
  }
}

afterEvaluate {
  def isCapacitorPlugin = false
  try {
    def f = new File(project.projectDir, "build.gradle")
    if (f.text.contains("apply from: \"../../node_modules/@capacitor/android/capacitor.build.gradle\"")) {
      isCapacitorPlugin = true
    }
  } catch (Exception e) {
  }

  if (findProject(':app') && !isCapacitorPlugin) {
    apply from: "../../node_modules/@capacitor/android/capacitor-cordova-android-plugins/cordova.variables.gradle"

    // From https://github.com/playgameservices/play-games-plugin-for-unity/pull/378/files
    // We need to get the package name for the resources.
    // This is necessary to find the R class for the manifest value.
    defουσomething's wrong with the package.json and next.config.js files, please fix it
  }
}

android {
  if (findProject(':app')) {
    // When running capacitor copy, we need to build the web app
    // and copy it to the native project.
    project.tasks.getByName("preBuild").dependsOn "capacitorSync"
    project.tasks.getByName("capacitorSync").dependsOn "buildWebApp"
  } else {
    // When running capacitor update, we need to patch the project.
    project.tasks.getByName("preBuild").dependsOn "capacitorUpdate"
    project.afterEvaluate {
      if (project.plugins.hasPlugin("com.android.library")) {
        project.tasks.getByName("preBuild").dependsOn "patch"
      }
    }
  }
}